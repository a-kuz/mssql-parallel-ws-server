{"version":3,"file":"queryier.js","sourceRoot":"./src/","sources":["queryier.ts"],"names":[],"mappings":"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","sourcesContent":["import { readFileSync } from 'fs';\r\nimport { ConnectionPool, IRecordSet, IResult, IRow, ISOLATION_LEVEL } from 'mssql'\r\nimport { config, IOptions } from 'mssql'\r\nimport ws from 'socket.io';\r\n\r\nvar connectTimeout: number = 8000\r\nvar requestTimeout: number = 900000\r\n\r\nexport class Querier {\r\n    constructor(strQ: string = \"\") {\r\n        let serversJSON = readFileSync('config\\/servers.json').toString()\r\n        Querier.servers = JSON.parse(serversJSON).sort(() => Math.random() > 0.5 ? 0 : -1)\r\n        this.strQ = strQ\r\n    }\r\n    private doned: number = 0\r\n    private fullDoned: number = 0\r\n    static servers: any[] = JSON.parse(\r\n        readFileSync('config\\/servers.json').toString()\r\n    ).sort(() => Math.random() > 0.5 ? 0 : -1)\r\n    private TsqlQuery: string\r\n\r\n    public set strQ(v: string) {\r\n        this.TsqlQuery = v;\r\n    }\r\n    public get strQ(): string {\r\n        return this.TsqlQuery;\r\n    }\r\n\r\n    private socket: ws.Socket\r\n    public setSocket(socket: ws.Socket) {\r\n        this.socket = socket;\r\n        socket.emit(\"start\", { totalInstances: (Querier.servers.length) })\r\n    }\r\n    async executeSQL(connectionString: config): Promise<IResult<IRow>> {\r\n        // try {\r\n        let pool: ConnectionPool\r\n        let conn: ConnectionPool\r\n        var result: IResult<any>\r\n        const q: TemplateStringsArray = this.strQ as any\r\n        pool = await new ConnectionPool(connectionString)\r\n        conn = await pool.connect()\r\n        result = await conn.query(q)\r\n        await pool.close()\r\n        return result\r\n    }\r\n\r\n    async processingCallback(server, i: number) {\r\n        console.log(server)\r\n        //this.doned = this.doned + 1\r\n        let j = 0\r\n        let ob: any\r\n        var result\r\n        var error\r\n        try {\r\n            let o: IOptions = {\r\n                connectTimeout,\r\n                isolationLevel: ISOLATION_LEVEL.READ_UNCOMMITTED,\r\n                appName: 'mass-sql',\r\n                maxRetriesOnTransientErrors: 2,\r\n                requestTimeout,\r\n                trustedConnection: false\r\n            }\r\n            let c: config = {\r\n                database: 'sup_kkm',\r\n                server: server.insance,\r\n                connectionTimeout: connectTimeout,\r\n                user: 'sa',\r\n                password: 'ser09l',\r\n                requestTimeout,\r\n                options: o\r\n            }\r\n            result = (await this.executeSQL(c)).recordset\r\n        }\r\n        catch (error) {\r\n\r\n            if (this.socket) {\r\n\r\n                this.socket.emit(\"err\",\r\n                    {\r\n                        error, ib: server.code\r\n                    })\r\n            }\r\n            console.groupCollapsed(`err: ${error}`);\r\n            console.log(server.code);\r\n            console.groupEnd();\r\n            ob = [{ ib: server.insance, error }]\r\n\r\n            return ob\r\n        } finally {\r\n            const recordset: IRecordSet<any> | Error = result\r\n            // if (this.resultTable.length === 0) {\r\n            //     this.resultTable = [recordset]\r\n            // }\r\n            if (recordset == undefined) { ob = [{ id: -1, ib: server.code }] } else {\r\n                ob = (recordset as IRecordSet<any>).map((el) => {\r\n                    j++\r\n                    el.ib = server.code\r\n                    let ib_host: string = server.host.replace(/ost/, 'serv')\r\n                    el.ib_href = `http://${ib_host}:85/sup_kkm`\r\n                    el.id = ((i * 10000) + j)\r\n                    return el\r\n                })\r\n            }\r\n            // this.resultTable = this.resultTable.concat([...ob])\r\n            return ob\r\n        }\r\n    }\r\n    async processing(): Promise<any> {\r\n        //this.doned = 0\r\n        console.log('processing')\r\n        return Querier.servers.map((e, i) => {\r\n            return this.processingCallback(e, i)\r\n\r\n        })\r\n    }\r\n    async execQueries() {\r\n\r\n        for await (const obj of (await this.processing())) {\r\n\r\n            try {\r\n                if (obj.length) {\r\n                    obj.forEach(element => {\r\n                        Object.keys(element).forEach(key => {\r\n                            if (Buffer.isBuffer(element[key])) {\r\n                                element[key] = buf2hex(element[key]);\r\n                            }\r\n                        });\r\n                    });\r\n                    if (this.socket) {\r\n                        this.socket.send(obj)\r\n                        this.fullDoned++\r\n                        this.socket.emit(\"progress\",\r\n                            {\r\n                                value: (this.fullDoned / Querier.servers.length * 100),\r\n                                bufferValue: (this.doned / Querier.servers.length * 100)\r\n                            })\r\n                        console.log(`${this.fullDoned} / ${Querier.servers.length} (${this.doned})`)\r\n\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                console.error(error)\r\n                console.log(obj)\r\n                if (this.socket) {\r\n\r\n                    this.socket.emit(\"err\",\r\n                        {\r\n                            error, ib: obj.ib\r\n                        })\r\n                }\r\n            }\r\n        }\r\n        if (this.socket) {\r\n            this.socket.emit('end')\r\n        }\r\n    }\r\n}\r\n\r\nfunction buf2hex(buffer) { // buffer is an ArrayBuffer\r\n    return Array.prototype.map.call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2)).join('');\r\n}"]}